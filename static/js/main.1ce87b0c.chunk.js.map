{"version":3,"sources":["githubApi.js","actions/dashboard.js","components/dashboard/pull-request.js","components/common/flash.js","components/dashboard/stats.js","components/dashboard/filters.js","components/dashboard/index.js","components/settings/account.js","actions/settings.js","components/settings/repositories.js","actions/watchedRepos.js","components/settings/dashboard.js","components/settings/index.js","components/common/not-found.js","components/app.js","components/root.js","reducers/dashboard.js","reducers/watchedRepos.js","reducers/settings.js","reducers/index.js","index.js","configureStore.js","localStorage.js"],"names":["get","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","query","token","response","result","wrap","_context","prev","next","fetch","method","headers","Content-Type","Authorization","concat","body","JSON","stringify","sent","ok","json","errors","Error","message","data","abrupt","stop","this","_x","_x2","apply","arguments","queries","cursor","length","undefined","afterParam","repoIds","requestPullRequestsSuccess","watchedRepos","type","PR_STATE_CLASSES","review requested","changes requested","approved","commented","pending","dismissed","PullRequest","field","number","title","url","createdAt","author","repository","reviewState","now","Date","react_default","createElement","className","avatarUrl","src","width","height","alt","href","nameWithOwner","formatDistance","addSuffix","login","Flash","children","Stats","pullRequests","total","openedThisMonth","filter","pr","isSameMonth","updatedThisMonth","updatedAt","DEFAULT_FILTERS","repo","orderBy","connect","state","filters","dashboard","dispatch","setFilters","actions","props","handleSelectChange","e","objectSpread","defineProperty","target","name","value","Fragment","filteredCount","authors","_","chain","map","uniqBy","onChange","style","key","renderAuthorsSelect","repos","repoName","renderReposSelect","reviewStates","compact","renderReviewStateSelect","onClick","Dashboard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateInterval","_this2","selectedRepos","requestPullRequests","autoRefreshEnabled","setInterval","autoRefreshInterval","window","clearInterval","_this$props","filteredPullRequests","loading","githubError","Link","to","index_esm","icon","SettingsIcon","stats","dashboard_filters","SyncIcon","pull_request","assign","id","flash","React","PureComponent","defaultProps","applyFilters","filtered","settings","getState","results","t0","error","Account","input","createRef","setToken","rel","placeholder","ref","current","Component","settingsActions","Repositories","requestWatchedRepos","selectAllRepos","resetSelectedRepos","toggleRepoSelection","htmlId","checked","includes","LinkExternalIcon","size","initialResults","reposArray","paginate","paginatedResults","viewer","watching","edges","pageInfo","hasNextPage","toConsumableArray","node","owner","watchedReposActions","toggleAutoRefresh","setAutoRefreshInterval","interval","Settings","match","CloudUploadIcon","NavLink","activeClassName","DashboardIcon","PersonIcon","RepoIcon","Switch","Route","path","component","exact","render","Redirect","NotFound","App","Root","store","es","HashRouter","initialState","formatReviewState","replace","toLowerCase","getReviewState","reviews","reviewRequests","rootReducer","combineReducers","prs","action","nodes","flatten","reverse","repoId","persistedState","serializedState","localStorage","getItem","parse","err","loadState","middlewares","thunk","createStore","applyMiddleware","configureStore","subscribe","throttle","setItem","saveState","root","document","getElementById"],"mappings":"+RAEaA,EAAG,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAOC,GAAd,IAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAHF,iCAGwB,CAC3CC,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,cAAa,UAAAC,OAAYZ,IAE3Ba,KAAMC,KAAKC,UAAU,CAAEhB,YAPR,YACXE,EADWG,EAAAY,MAUJC,GAVI,CAAAb,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAWML,EAASiB,OAXf,YAWThB,EAXSE,EAAAY,MAaJG,OAbI,CAAAf,EAAAE,KAAA,cAcP,IAAIc,MAAMlB,EAAOiB,OAAO,GAAGE,SAdpB,WAiBXnB,EAAOoB,KAjBI,CAAAlB,EAAAE,KAAA,gBAAAF,EAAAmB,OAAA,SAkBNrB,EAAOoB,MAlBD,cAsBX,IAAIF,MAAM,mCAtBC,yBAAAhB,EAAAoB,SAAA1B,EAAA2B,SAAH,gBAAAC,EAAAC,GAAA,OAAAnC,EAAAoC,MAAAH,KAAAI,YAAA,GAyBHC,EACG,WAAiB,IAAhBC,EAAgBF,UAAAG,OAAA,QAAAC,IAAAJ,UAAA,GAAAA,UAAA,GAAP,GAChBK,EAAaH,EAAM,UAAAnB,OAAamB,GAAW,GACjD,qGAAAnB,OAKUsB,EALV,4bAHSJ,EAgCW,SAAAK,GAAO,0CAAAvB,OAEXE,KAAKC,UAAUoB,GAFJ,miDC/ClBC,EAA6B,SAACd,EAAMe,GAAP,MAAyB,CACjEC,KAT2C,gCAU3ChB,OACAe,yBCZIE,EAAmB,CACvBC,mBAAoB,qBACpBC,oBAAqB,gBACrBC,SAAU,sBACVC,UAAW,cACXC,QAAS,cACTC,UAAW,qBAoDEC,EAjDK,SAAAtD,GAQd,IAEiBuD,EATrBC,EAOIxD,EAPJwD,OACAC,EAMIzD,EANJyD,MACAC,EAKI1D,EALJ0D,IACAC,EAII3D,EAJJ2D,UACAC,EAGI5D,EAHJ4D,OACAC,EAEI7D,EAFJ6D,WACAC,EACI9D,EADJ8D,YAEMC,EAAM,IAAIC,KAGhB,OACEC,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,sCACZP,EAAOQ,WACNH,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,QACbF,EAAA7D,EAAA8D,cAAA,OACEC,UAAU,SACVE,IAAKT,EAAOQ,UACZE,MAAM,KACNC,OAAO,KACPC,IAAI,MAIVP,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,aACbF,EAAA7D,EAAA8D,cAAA,KAAGO,KAAMZ,EAAWH,IAAKS,UAAU,sBAChCN,EAAWa,eAEdT,EAAA7D,EAAA8D,cAAA,KAAGO,KAAMf,EAAKS,UAAU,kCACrBV,GAEHQ,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,aAAf,IACIX,EADJ,UACmB,IACjBS,EAAA7D,EAAA8D,cAAA,QAAMT,MAAOE,IAxBAJ,EAwByBI,EAxBhBgB,YAAepB,EAAOQ,EAAK,CAAEa,WAAW,MAsBhE,MAE8D,IAC5DX,EAAA7D,EAAA8D,cAAA,KAAGO,KAAMb,EAAOF,IAAKS,UAAU,cAC5BP,EAAOiB,OAETf,EACCG,EAAA7D,EAAA8D,cAAA,QAAMC,UAAS,cAAA/C,OAAgB2B,EAAiBe,KAC7CA,GAED,SCxCCgB,EAXD,SAAA9E,GAAA,IAAG8C,EAAH9C,EAAG8C,KAAMiC,EAAT/E,EAAS+E,SAAT,OACZd,EAAA7D,EAAA8D,cAAA,OAAKC,UAAS,mBAAA/C,OAAqB0B,EAAI,SAAA1B,OAAY0B,GAAS,OACzDiC,YC+BUC,EAhCD,SAAAhF,GAAsB,IAAnBiF,EAAmBjF,EAAnBiF,aACTlB,EAAM,IAAIC,KACVkB,EAAQD,EAAazC,QAAU,EAC/B2C,EACJF,EAAaG,OAAO,SAAAC,GAAE,OAAIC,YAAY,IAAItB,KAAKqB,EAAG1B,WAAYI,KAC3DvB,QAAU,EACT+C,EACJN,EAAaG,OAAO,SAAAC,GAAE,OAAIC,YAAY,IAAItB,KAAKqB,EAAGG,WAAYzB,KAC3DvB,QAAU,EAEf,OACEyB,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,eACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,gCACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,sBAAd,cACAF,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,MAAMe,IAExBjB,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,gCACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,sBAAd,qBACAF,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,MAAMgB,IAExBlB,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,gCACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,sBAAd,sBACAF,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,MAAMoB,qBCpBxBE,EAAkB,CACtBC,KAAM,GACN9B,OAAQ,GACR+B,QAAS,aAkIIC,cAXS,SAAAC,GAAK,MAAK,CAChCC,QAASD,EAAME,UAAUD,UAGA,SAAAE,GAAQ,MAAK,CACtCC,WAAY,SAAAH,GACVE,EJhGsB,SAAAF,GAAO,MAAK,CACpChD,KAjCyB,cAkCzBgD,WI8FWI,CAAmBJ,KAE9BE,aAGaJ,CA/HC,SAAAO,GACd,IAAMC,EAAqB,SAAAC,GACzBF,EAAMF,WAANhG,OAAAqG,EAAA,EAAArG,CAAA,GACKkG,EAAML,QADX7F,OAAAsG,EAAA,EAAAtG,CAAA,GAEGoG,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,UA0F9B,OACEzC,EAAA7D,EAAA8D,cAAAD,EAAA7D,EAAAuG,SAAA,KACE1C,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,kBAAhB,SAAwCgC,EAAMS,cAA9C,MAxFwB,WAC1B,IAAMC,EAAUC,IAAEC,MAAMZ,EAAMlB,cAC3B+B,IAAI,SAAA3B,GAAE,OAAIA,EAAGzB,SACbqD,OAAO,SACPP,QAEH,OACEzC,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,6BACVsC,KAAK,SACLC,MAAOP,EAAML,QAAQlC,OACrBsD,SAAUd,EACVe,MAAO,CAAE7C,MAAO,UAEhBL,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAM,IAAd,eACCG,EAAQG,IAAI,SAAAhH,GAAA,IAAG6E,EAAH7E,EAAG6E,MAAH,OACXZ,EAAA7D,EAAA8D,cAAA,UAAQkD,IAAKvC,EAAO6B,MAAO7B,GACxBA,MAwENwC,GAjEqB,WACxB,IAAMC,EAAQR,IAAEC,MAAMZ,EAAMlB,cACzB+B,IAAI,SAAA3B,GAAE,OAAIA,EAAGkC,WACbN,SACAP,QAEH,OACEzC,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,6BACVsC,KAAK,OACLC,MAAOP,EAAML,QAAQJ,KACrBwB,SAAUd,EACVe,MAAO,CAAE7C,MAAO,UAEhBL,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAM,IAAd,oBACCY,EAAMN,IAAI,SAAAtB,GAAI,OACbzB,EAAA7D,EAAA8D,cAAA,UAAQkD,IAAK1B,EAAMgB,MAAOhB,GACvBA,MAiDN8B,GA1C2B,WAC9B,IAAMC,EAAeX,IAAEC,MAAMZ,EAAMlB,cAChC+B,IAAI,SAAA3B,GAAE,OAAIA,EAAGvB,cACbmD,SACAS,UACAhB,QAEH,OACEzC,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,6BACVsC,KAAK,cACLC,MAAOP,EAAML,QAAQhC,YACrBoD,SAAUd,EACVe,MAAO,CAAE7C,MAAO,UAEhBL,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAM,IAAd,qBACCe,EAAaT,IAAI,SAAAnB,GAAK,OACrB5B,EAAA7D,EAAA8D,cAAA,UAAQkD,IAAKvB,EAAOa,MAAOb,GACxBA,MAyBN8B,GACD1D,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,kBAAhB,aAlBFF,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,6BACVsC,KAAK,UACLC,MAAOP,EAAML,QAAQH,QACrBuB,SAAUd,EACVe,MAAO,CAAE7C,MAAO,UAEhBL,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAO,aAAf,oBACAzC,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAO,aAAf,WAYAzC,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,aACVyD,QAAS,kBAAMzB,EAAMF,WAAWR,KAFlC,YCnGAoC,cACJ,SAAAA,EAAY1B,GAAO,IAAA2B,EAAA,OAAA7H,OAAA8H,EAAA,EAAA9H,CAAAgC,KAAA4F,IACjBC,EAAA7H,OAAA+H,EAAA,EAAA/H,CAAAgC,KAAAhC,OAAAgI,EAAA,EAAAhI,CAAA4H,GAAAK,KAAAjG,KAAMkE,KACDgC,eAAiB,KAFLL,mFAKC,IAAAM,EAAAnG,KACdA,KAAKkE,MAAMkC,cAAc7F,OAAS,IACpCP,KAAKkE,MAAMmC,oBACTrG,KAAKkE,MAAMkC,cACXpG,KAAKkE,MAAM3F,OAGTyB,KAAKkE,MAAMoC,qBACbtG,KAAKkG,eAAiBK,YAAY,WAChCJ,EAAKjC,MAAMmC,oBACTF,EAAKjC,MAAMkC,cACXD,EAAKjC,MAAM3F,QAEqB,GAAjCyB,KAAKkE,MAAMsC,oBAA2B,sDAM7CC,OAAOC,cAAc1G,KAAKkG,iDAGnB,IAAAS,EAUH3G,KAAKkE,MARPkC,EAFKO,EAELP,cACApD,EAHK2D,EAGL3D,aACA4D,EAJKD,EAILC,qBACAC,EALKF,EAKLE,QACAC,EANKH,EAMLG,YACAT,EAPKM,EAOLN,oBACA9H,EARKoI,EAQLpI,MACA+H,EATKK,EASLL,mBAGF,OACEtE,EAAA7D,EAAA8D,cAAAD,EAAA7D,EAAAuG,SAAA,KACE1C,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,4CACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,yCACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,aACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,MAAd,cAEFF,EAAA7D,EAAA8D,cAAA,WACED,EAAA7D,EAAA8D,cAAC8E,EAAA,EAAD,CAAMC,GAAG,YAAY9E,UAAU,YAC7BF,EAAA7D,EAAA8D,cAACgF,EAAA,EAAD,CAASC,KAAMC,MADjB,gBAMNnF,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,YACdF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,qBACXkE,EAAc7F,OAMdyB,EAAA7D,EAAA8D,cAAAD,EAAA7D,EAAAuG,SAAA,KACE1C,EAAA7D,EAAA8D,cAACmF,EAAD,CAAOpE,aAAcA,IACrBhB,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,OACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,uCACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,sCACbF,EAAA7D,EAAA8D,cAACoF,EAAD,CACErE,aAAcA,EACd2B,cAAeiC,EAAqBrG,UAGxCyB,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,4BACZoE,GACCtE,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,qBAAhB,eACe,IACbF,EAAA7D,EAAA8D,cAAC8E,EAAA,EAAD,CAAMC,GAAI,uBAAV,WAFF,KAKFhF,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,yBACVyD,QAAS,kBACPU,EAAoBD,EAAe7H,KAGrCyD,EAAA7D,EAAA8D,cAACgF,EAAA,EAAD,CAASC,KAAMI,MANjB,WAWHT,EACC7E,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,0CACbF,EAAA7D,EAAA8D,cAAA,wBAEA,KAEH6E,EACC9E,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,0CACbF,EAAA7D,EAAA8D,cAAA,wDAC+C,IAC7CD,EAAA7D,EAAA8D,cAAC8E,EAAA,EAAD,CAAMC,GAAG,qBAAT,SAFF,qCAMA,KAEFH,GAAYC,GAAgBF,EAAqBrG,OAI/C,KAHFyB,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,0CACbF,EAAA7D,EAAA8D,cAAA,2CAIF4E,IAAYC,GAAeF,EAAqBrG,OAAS,EACvDqG,EAAqB7B,IAAI,SAAA3B,GAAE,OACzBpB,EAAA7D,EAAA8D,cAACsF,EAADvJ,OAAAwJ,OAAA,CAAarC,IAAK/B,EAAGqE,IAAQrE,MAE/B,OA3DRpB,EAAA7D,EAAA8D,cAACyF,EAAD,iCAC4B,IAC1B1F,EAAA7D,EAAA8D,cAAC8E,EAAA,EAAD,CAAMC,GAAG,0BAAT,gBAFF,mBAzDUW,IAAMC,eAwI9BhC,EAAUiC,aAAe,CACvBzB,cAAe,GACf7H,MAAO,KACPyE,aAAc,GACd6D,SAAS,EACTC,YAAa,MAGf,IAAMgB,EAAe,SAAC9E,EAAca,GAClC,IAAIkE,EAAW/E,EAgBf,OAdIa,EAAQJ,OACVsE,EAAWlD,IAAE1B,OAAO4E,EAAU,SAAA3E,GAAE,OAAIA,EAAGkC,WAAazB,EAAQJ,QAG1DI,EAAQlC,SACVoG,EAAWlD,IAAE1B,OAAO4E,EAAU,SAAA3E,GAAE,OAAIA,EAAGzB,OAAOiB,QAAUiB,EAAQlC,UAG9DkC,EAAQhC,cACVkG,EAAWlD,IAAE1B,OAAO4E,EAAU,SAAA3E,GAAE,OAAIA,EAAGvB,cAAgBgC,EAAQhC,eAGjEkG,EAAWlD,IAAEnB,QAAQqE,EAAUlE,EAAQH,QAAS,SA0BnCC,cArBS,SAAAC,GAAK,MAAK,CAChCwC,cAAexC,EAAMoE,SAAS5B,cAC9B7H,MAAOqF,EAAMoE,SAASzJ,MACtB+H,mBAAoB1C,EAAMoE,SAAS1B,mBACnCE,oBAAqB5C,EAAMoE,SAASxB,oBACpCM,YAAalD,EAAME,UAAUgD,YAC7BD,QAASjD,EAAME,UAAU+C,QACzB7D,aAAcY,EAAME,UAAUd,aAC9B4D,qBAAsBkB,EACpBlE,EAAME,UAAUd,aAChBY,EAAME,UAAUD,WAIO,SAAAE,GAAQ,MAAK,CACtCsC,oBAAqB,SAAC3F,EAASnC,GAC7BwF,EL5K+B,SAACrD,EAASnC,GAAV,sBAAAR,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAoB,SAAAC,EACrD0F,EACAkE,GAFqD,IAAArH,EAAAtC,EAAA4J,EAAA,OAAAhK,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAI/C+B,EAAeqH,IAAWrH,aAAayE,MAJQ1G,EAAAC,KAAA,EAMnDmF,EArB6C,CAC/ClD,KAN2C,kCA2BnCvC,EAAQ+B,EAA6BK,GAPQ/B,EAAAE,KAAA,EAQ7Bf,EAAIQ,EAAOC,GARkB,OAQ7C2J,EAR6CvJ,EAAAY,KASnDwE,EAASpD,EAA2BuH,EAAStH,IATMjC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwJ,GAAAxJ,EAAA,SAWnDoF,EAhBgD,CAClDlD,KAd2C,gCAe3CuH,MAcqCzJ,EAAAwJ,KAXgB,yBAAAxJ,EAAAoB,SAAA1B,EAAA2B,KAAA,aAApB,gBAAAC,EAAAC,GAAA,OAAAnC,EAAAoC,MAAAH,KAAAI,YAAA,GK4KtB6D,CAA4BvD,EAASnC,KAEhDwF,aAGaJ,CAGbiC,mBCtMIyC,cACJ,SAAAA,EAAYnE,GAAO,IAAA2B,EAAA,OAAA7H,OAAA8H,EAAA,EAAA9H,CAAAgC,KAAAqI,IACjBxC,EAAA7H,OAAA+H,EAAA,EAAA/H,CAAAgC,KAAAhC,OAAAgI,EAAA,EAAAhI,CAAAqK,GAAApC,KAAAjG,KAAMkE,KACDoE,MAAQX,IAAMY,YAFF1C,wEAKV,IAAAM,EAAAnG,KAAA2G,EACqB3G,KAAKkE,MAAzB3F,EADDoI,EACCpI,MAAOiK,EADR7B,EACQ6B,SAEf,OACExG,EAAA7D,EAAA8D,cAAAD,EAAA7D,EAAAuG,SAAA,KACE1C,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,WACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,mBAAd,YAEFF,EAAA7D,EAAA8D,cAAA,oFAIAD,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,QACZF,EAAA7D,EAAA8D,cAAA,kBACQ,IACND,EAAA7D,EAAA8D,cAAA,KACEO,KAAK,qCACL+B,OAAO,SACPkE,IAAI,uBAHN,0BAMK,IARP,aASYzG,EAAA7D,EAAA8D,cAAA,+BATZ,KAWAD,EAAA7D,EAAA8D,cAAA,6CACkCD,EAAA7D,EAAA8D,cAAA,oBADlC,qBACsE,IACpED,EAAA7D,EAAA8D,cAAA,2BAFF,KAIAD,EAAA7D,EAAA8D,cAAA,qDAEFD,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,QACdF,EAAA7D,EAAA8D,cAAA,SACEpB,KAAK,OACLqB,UAAU,eACVwG,YAAY,QACZC,IAAK3I,KAAKsI,MACVrD,SAAU,kBAAMuD,EAASrC,EAAKmC,MAAMM,QAAQnE,QAC5CA,MAAOlG,aA3CGsK,aAwDtBR,EAAQR,aAAe,CACrBtJ,MAAO,MAGT,IASeoF,cATS,SAAAC,GAAK,MAAK,CAChCrF,MAAOqF,EAAMoE,SAASzJ,QAGG,SAAAwF,GAAQ,MAAK,CACtCyE,SAAU,SAAA/D,GAAK,OAAIV,EC/DG,SAAAU,GAAK,MAAK,CAChC5D,KARuB,YASvB4D,SD6D4BqE,CAAyBrE,KACrDV,aAGaJ,CAGb0E,WElEIU,8LAEF/I,KAAKkE,MAAM8E,oBAAoBhJ,KAAKkE,MAAM3F,wCAGnC,IAAAoI,EAWH3G,KAAKkE,MATP3F,EAFKoI,EAELpI,MACAsI,EAHKF,EAGLE,QACAC,EAJKH,EAILG,YACAlG,EALK+F,EAKL/F,aACAwF,EANKO,EAMLP,cACA6C,EAPKtC,EAOLsC,eACAC,EARKvC,EAQLuC,mBACAC,EATKxC,EASLwC,oBACAH,EAVKrC,EAULqC,oBAGF,OACEhH,EAAA7D,EAAA8D,cAAAD,EAAA7D,EAAAuG,SAAA,KACE1C,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,WACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,mBAAd,iBAEFF,EAAA7D,EAAA8D,cAAA,KAAGC,UAAU,QAAb,gEACgE,IAC9DF,EAAA7D,EAAA8D,cAAA,0CAC4B,IAC1BD,EAAA7D,EAAA8D,cAAA,KAAGO,KAAK,+BAAR,YAFF,sBAKFR,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,OACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,4CACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,aAAd,wBACwB,IACtBF,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,8BACbkE,EAAc7F,SAGnByB,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,wBACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,YACbF,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,2BACVyD,QAAS,kBACPsD,EAAerI,EAAamE,IAAI,SAAAtB,GAAI,OAAIA,EAAKgE,QAHjD,cAQAzF,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,2BACVyD,QAAS,kBAAMuD,MAFjB,UAOFlH,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,yBACVyD,QAAS,kBAAMqD,EAAoBzK,KAEnCyD,EAAA7D,EAAA8D,cAACgF,EAAA,EAAD,CAASC,KAAMI,MAJjB,WASHT,EACC7E,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,0CACbF,EAAA7D,EAAA8D,cAAA,wBAEA,KAEH6E,EACC9E,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,0CACbF,EAAA7D,EAAA8D,cAAA,wDAC+C,IAC7CD,EAAA7D,EAAA8D,cAAC8E,EAAA,EAAD,CAAMC,GAAG,qBAAT,SAFF,qCAMA,KAEFH,GAAYC,GAAgBlG,EAAaL,OAIvC,KAHFyB,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,0CACbF,EAAA7D,EAAA8D,cAAA,+DAIF4E,IAAYC,GAAelG,EAAaL,OAAS,EAC/CK,EAAamE,IAAI,SAAAhH,GAAuB,IAApB0J,EAAoB1J,EAApB0J,GAAIjD,EAAgBzG,EAAhByG,KAAM/C,EAAU1D,EAAV0D,IACtB2H,EAAM,QAAAjK,OAAWsI,GACjB4B,EAAUjD,EAAckD,SAAS7B,GAEvC,OACEzF,EAAA7D,EAAA8D,cAAA,OACEC,UAAU,iEACViD,IAAKsC,GAELzF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,gCACbF,EAAA7D,EAAA8D,cAAA,aACED,EAAA7D,EAAA8D,cAAA,SACEpB,KAAK,WACL4G,GAAI2B,EACJnE,SAXO,kBAAMkE,EAAoB1B,IAYjC4B,QAASA,IACR,IACF7E,IAGLxC,EAAA7D,EAAA8D,cAAA,KAAGC,UAAU,yBAAyBM,KAAMf,GAC1CO,EAAA7D,EAAA8D,cAACgF,EAAA,EAAD,CAASC,KAAMqC,IAAkBC,KAAM,KADzC,sBAON,cAlHa7B,IAAMC,eAiIjCmB,EAAalB,aAAe,CAC1BjH,aAAc,GACdiG,SAAS,EACTC,YAAa,KACbV,cAAe,GACf7H,MAAO,MAGT,IAiBeoF,cAjBS,SAAAC,GAAK,MAAK,CAChChD,aAAcgD,EAAMhD,aAAayE,MACjCwB,QAASjD,EAAMhD,aAAaiG,QAC5BC,YAAalD,EAAMhD,aAAakG,YAChCV,cAAexC,EAAMoE,SAAS5B,cAC9B7H,MAAOqF,EAAMoE,SAASzJ,QAGG,SAAAwF,GAAQ,MAAK,CACtCiF,oBAAqB,SAAAzK,GAAK,OACxBwF,ECzI+B,SAAAxF,GAAK,sBAAAR,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAI,SAAAC,EAAM0F,GAAN,IAAAzF,EAAAmL,EAAAC,EAAAC,EAAAC,EAAA,OAAA1L,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAExCmF,EAhB6C,CAC/ClD,KAL2C,kCAqBrCvC,EAAQ+B,IAH4B1B,EAAAE,KAAA,EAIXf,EAAIQ,EAAOC,GAJA,UAIlCkL,EAJkC9K,EAAAY,KAKpCmK,EAAaD,EAAeI,OAAOC,SAASC,OAC5CN,EAAeI,OAAOC,SAASE,SAASC,YANJ,CAAAtL,EAAAE,KAAA,SAOlC8K,GAAW,EAPuB,WAQ/BA,EAR+B,CAAAhL,EAAAE,KAAA,gBASpCP,EAAQ+B,EAAqBqJ,EAAWA,EAAWnJ,OAAS,GAAGD,QAT3B3B,EAAAE,KAAA,GAULf,EAAIQ,EAAOC,GAVN,QAU9BqL,EAV8BjL,EAAAY,KAWpCmK,EAAU,GAAAvK,OAAAnB,OAAAkM,EAAA,EAAAlM,CAAO0L,GAAP1L,OAAAkM,EAAA,EAAAlM,CAAsB4L,EAAiBC,OAAOC,SAASC,QACjEJ,EAAWC,EAAiBC,OAAOC,SAASE,SAASC,YAZjBtL,EAAAE,KAAA,gBAexC6K,EAAaA,EAAW3E,IAAI,SAAAtB,GAAI,MAAK,CACnCgE,GAAIhE,EAAK0G,KAAK1C,GACdjD,KAAMf,EAAK0G,KAAK3F,KAChB/C,IAAKgC,EAAK0G,KAAK1I,IACf2I,MAAO3G,EAAK0G,KAAKC,MACjB1I,UAAW+B,EAAK0G,KAAKzI,aAEvBqC,EAhC+C,CACjDlD,KAR2C,gCAS3ChB,KA8BsC6J,IAtBI/K,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwJ,GAAAxJ,EAAA,SAwBxCoF,EA7BgD,CAClDlD,KAZ2C,gCAa3CuH,MA2BqCzJ,EAAAwJ,KAxBK,yBAAAxJ,EAAAoB,SAAA1B,EAAA2B,KAAA,aAAJ,gBAAAC,GAAA,OAAAlC,EAAAoC,MAAAH,KAAAI,YAAA,GDyI3BiK,CAAwC9L,KACnD4K,oBAAqB,SAAA1B,GAAE,OAAI1D,EDnJM,SAAA0D,GAAE,MAAK,CACxC5G,KAZmC,wBAanC4G,MCiJoCqB,CAAoCrB,KACxEwB,eAAgB,SAAAvI,GAAO,OAAIqD,ED/IC,SAAArD,GAAO,MAAK,CACxCG,KAhB8B,mBAiB9BH,WC6IoCoI,CAA+BpI,KACnEwI,mBAAoB,kBAAMnF,ED3Ia,CACvClD,KApBkC,0BC+JlCkD,aAGaJ,CAGboF,GEvHapF,cAZS,SAAAC,GAAK,MAAK,CAChC0C,mBAAoB1C,EAAMoE,SAAS1B,mBACnCE,oBAAqB5C,EAAMoE,SAASxB,sBAGX,SAAAzC,GAAQ,MAAK,CACtCuG,kBAAmB,kBAAMvG,EHjBa,CACtClD,KAvBiC,yBGwCjC0J,uBAAwB,SAAAC,GAAQ,OAC9BzG,EHfkC,SAAAyG,GAAQ,MAAK,CACjD3J,KA1BuC,4BA2BvC2J,YGaWvG,CAA+BuG,KAC1CzG,aAGaJ,CA7CG,SAAAO,GAAK,OACrBlC,EAAA7D,EAAA8D,cAAAD,EAAA7D,EAAAuG,SAAA,KACE1C,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,WACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,mBAAd,cAEFF,EAAA7D,EAAA8D,cAAA,YACED,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,iBACbF,EAAA7D,EAAA8D,cAAA,aACED,EAAA7D,EAAA8D,cAAA,SACEpB,KAAK,WACLwI,QAASnF,EAAMoC,mBACfrB,SAAUf,EAAMoG,oBACf,IALL,+BAOEtI,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,6BACVuC,MAAOP,EAAMsC,oBACbvB,SAAU,SAAAb,GAAC,OAAIF,EAAMqG,uBAAuBnG,EAAEG,OAAOE,SAErDzC,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAM,KAAd,YACAzC,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAM,KAAd,aACAzC,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAM,MAAd,cACAzC,EAAA7D,EAAA8D,cAAA,UAAQwC,MAAM,MAAd,gBAGJzC,EAAA7D,EAAA8D,cAAA,KAAGC,UAAU,QAAb,qEC4COuI,EA7DE,SAAA1M,GAAA,IAAG2M,EAAH3M,EAAG2M,MAAH,OACf1I,EAAA7D,EAAA8D,cAAAD,EAAA7D,EAAAuG,SAAA,KACE1C,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,4CACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,yCACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,aACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,MAAd,aAEFF,EAAA7D,EAAA8D,cAAA,WACED,EAAA7D,EAAA8D,cAAC8E,EAAA,EAAD,CAAMC,GAAG,IAAI9E,UAAU,mBACrBF,EAAA7D,EAAA8D,cAACgF,EAAA,EAAD,CAASC,KAAMyD,MADjB,YAMN3I,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,YACdF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,4BACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,cACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,QACbF,EAAA7D,EAAA8D,cAAC2I,EAAA,EAAD,CACE5D,GAAE,GAAA7H,OAAKuL,EAAMjJ,IAAX,cACFS,UAAU,YACV2I,gBAAgB,YAEhB7I,EAAA7D,EAAA8D,cAACgF,EAAA,EAAD,CAASC,KAAM4D,MALjB,cAOA9I,EAAA7D,EAAA8D,cAAC2I,EAAA,EAAD,CACE5D,GAAE,GAAA7H,OAAKuL,EAAMjJ,IAAX,YACFS,UAAU,YACV2I,gBAAgB,YAEhB7I,EAAA7D,EAAA8D,cAACgF,EAAA,EAAD,CAASC,KAAM6D,MALjB,YAOA/I,EAAA7D,EAAA8D,cAAC2I,EAAA,EAAD,CACE5D,GAAE,GAAA7H,OAAKuL,EAAMjJ,IAAX,iBACFS,UAAU,YACV2I,gBAAgB,YAEhB7I,EAAA7D,EAAA8D,cAACgF,EAAA,EAAD,CAASC,KAAM8D,MALjB,mBASJhJ,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,SACbF,EAAA7D,EAAA8D,cAACgJ,EAAA,EAAD,KACEjJ,EAAA7D,EAAA8D,cAACiJ,EAAA,EAAD,CAAOC,KAAI,GAAAhM,OAAKuL,EAAMjJ,IAAX,cAA4B2J,UAAWxF,IAClD5D,EAAA7D,EAAA8D,cAACiJ,EAAA,EAAD,CAAOC,KAAI,GAAAhM,OAAKuL,EAAMjJ,IAAX,YAA0B2J,UAAW/C,IAChDrG,EAAA7D,EAAA8D,cAACiJ,EAAA,EAAD,CACEC,KAAI,GAAAhM,OAAKuL,EAAMjJ,IAAX,iBACJ2J,UAAWrC,IAEb/G,EAAA7D,EAAA8D,cAACiJ,EAAA,EAAD,CACEG,OAAK,EACLF,KAAI,GAAAhM,OAAKuL,EAAMjJ,KACf6J,OAAQ,kBAAMtJ,EAAA7D,EAAA8D,cAACsJ,EAAA,EAAD,CAAUvE,GAAE,GAAA7H,OAAKuL,EAAMjJ,IAAX,yBCnDzB+J,EAXE,kBACfxJ,EAAA7D,EAAA8D,cAAA,QAAMC,UAAU,YACdF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,qBACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,cACbF,EAAA7D,EAAA8D,cAAA,uBACAD,EAAA7D,EAAA8D,cAAA,iECoBOwJ,SAnBH,kBACVzJ,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,OACbF,EAAA7D,EAAA8D,cAAA,UAAQC,UAAU,0CAChBF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,yCACbF,EAAA7D,EAAA8D,cAAA,MAAIC,UAAU,gBACZF,EAAA7D,EAAA8D,cAAC8E,EAAA,EAAD,CAAMC,GAAG,IAAI9E,UAAU,cAAvB,iBAMNF,EAAA7D,EAAA8D,cAACgJ,EAAA,EAAD,KACEjJ,EAAA7D,EAAA8D,cAACiJ,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAK,IAAIC,UAAWxF,IACjC5D,EAAA7D,EAAA8D,cAACiJ,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWX,IACnCzI,EAAA7D,EAAA8D,cAACiJ,EAAA,EAAD,CAAOE,UAAWI,QCJTE,EAZF,SAAA3N,GAAA,IAAG4N,EAAH5N,EAAG4N,MAAH,OACX3J,EAAA7D,EAAA8D,cAAC2J,EAAA,EAAD,CAAUD,MAAOA,GACf3J,EAAA7D,EAAA8D,cAAC4J,EAAA,EAAD,KACE7J,EAAA7D,EAAA8D,cAACiJ,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWK,+BCN3BK,EAAe,CACnB9I,aAAc,GACda,QAAS,CACPJ,KAAM,GACN9B,OAAQ,GACRE,YAAa,GACb6B,QAAS,aAEXmD,SAAS,EACTC,YAAa,MAGTiF,GAAoB,SAAAnI,GACxB,GAAqB,kBAAVA,EACX,OAAOA,EAAMoI,QAAQ,KAAM,KAAKC,eAG5BC,GAAiB,SAACC,EAASC,GAK/B,IAAIxI,EAAQ,KACZ,OAAKuI,EAAQ5L,QAMbqD,EAAQuI,EAAQA,EAAQ5L,OAAS,GAAGqD,MAC7BmI,GAAkBnI,KANnBwI,EAAe7L,OAAS,IAC1BqD,EAAQ,oBAEHmI,GAAkBnI,KC5BvBkI,GAAe,CACnBzG,MAAO,GACPwB,SAAS,EACTC,YAAa,MCHTgF,GAAe,CACnBvN,MAAO,GACP6H,cAAe,GACfE,oBAAoB,EACpBE,oBAAqB,KCKR6F,GANKC,YAAgB,CAClCxI,UHgDF,WAAsD,IAlBpCyI,EAkBM3I,EAA8BxD,UAAAG,OAAA,QAAAC,IAAAJ,UAAA,GAAAA,UAAA,GAAtB0L,EAAcU,EAAQpM,UAAAG,OAAA,EAAAH,UAAA,QAAAI,EACpD,OAAQgM,EAAO3L,MACb,IfrDyC,gCesDvC,OAAO7C,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEiD,SAAS,EACTC,YAAa,OAEjB,If1DyC,gCe2DvC,OAAO9I,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEZ,cA7BUuJ,EA6BcC,EAAO3M,KA5B9BgF,IAAEC,MAAMyH,EAAIE,OAChBtJ,OAAO,SAAAgH,GAAI,OAAIA,IACfpF,IAAI,SAAAoF,GAAI,OAAItF,IAAEE,IAAIoF,EAAKnH,aAAa+G,MAAO,UAC3C2C,UACA3H,IAAI,SAAA3B,GAAE,OAAApF,OAAAqG,EAAA,EAAArG,CAAA,GACFoF,EADE,CAELkC,SAAUlC,EAAGxB,WAAWa,cACxBZ,YAAaqK,GACXrH,IAAEE,IAAI3B,EAAG+I,QAAQpC,MAAO,QACxBlF,IAAEE,IAAI3B,EAAGgJ,eAAerC,MAAO,aAGlCrG,QAAQ,aACRiJ,UACAlI,SAeGoC,SAAS,EACTC,YAAa,OAEjB,IfhEyC,gCeiEvC,OAAO9I,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEZ,aAAc,GACd8D,YAAa0F,EAAOpE,MACpBvB,SAAS,IAEb,IftEuB,ceuErB,OAAO7I,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEC,QAAS2I,EAAO3I,UAEpB,QACE,OAAOD,IG3EXhD,aFCa,WAAuC,IAA9BgD,EAA8BxD,UAAAG,OAAA,QAAAC,IAAAJ,UAAA,GAAAA,UAAA,GAAtB0L,GAAcU,EAAQpM,UAAAG,OAAA,EAAAH,UAAA,QAAAI,EACpD,OAAQgM,EAAO3L,MACb,IPPyC,gCOQvC,OAAO7C,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEiD,SAAS,EACTC,YAAa,OAEjB,IPZyC,gCOavC,OAAO9I,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEyB,MAAOmH,EAAO3M,KACdiH,YAAa,KACbD,SAAS,IAEb,IPlByC,gCOmBvC,OAAO7I,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEyB,MAAO,GACPyB,YAAa0F,EAAOpE,MACpBvB,SAAS,IAEb,QACE,OAAOjD,IEvBXoE,SDCa,WAAuC,IAA9BpE,EAA8BxD,UAAAG,OAAA,QAAAC,IAAAJ,UAAA,GAAAA,UAAA,GAAtB0L,GAAcU,EAAQpM,UAAAG,OAAA,EAAAH,UAAA,QAAAI,EACpD,OAAQgM,EAAO3L,MACb,IVXqB,YUYnB,OAAO7C,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEErF,MAAOiO,EAAO/H,QAElB,IVfiC,wBUgB/B,OAAOb,EAAMwC,cAAckD,SAASkD,EAAO/E,IAApCzJ,OAAAqG,EAAA,EAAArG,CAAA,GAEE4F,EAFF,CAGDwC,cAAexC,EAAMwC,cAAcjD,OACjC,SAAAyJ,GAAM,OAAIA,IAAWJ,EAAO/E,OAJ7BzJ,OAAAqG,EAAA,EAAArG,CAAA,GAQE4F,EARF,CASDwC,cAAa,GAAAjH,OAAAnB,OAAAkM,EAAA,EAAAlM,CAAM4F,EAAMwC,eAAZ,CAA2BoG,EAAO/E,OAEvD,IV1B4B,mBU2B1B,OAAOzJ,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEwC,cAAcpI,OAAAkM,EAAA,EAAAlM,CAAKwO,EAAO9L,WAE9B,IV9BgC,uBU+B9B,OAAO1C,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEEwC,cAAe,KAEnB,IVlC+B,sBUmC7B,OAAOpI,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEE0C,oBAAqB1C,EAAM0C,qBAE/B,IVtCqC,4BUuCnC,OAAOtI,OAAAqG,EAAA,EAAArG,CAAA,GACF4F,EADL,CAEE4C,oBAAqBgG,EAAOhC,WAEhC,QACE,OAAO5G,ME1CP+H,GCDiB,WACrB,IAAMkB,ECLiB,WACvB,IACE,IAAMC,EAAkBC,aAAaC,QAJpB,YAKjB,GAAwB,OAApBF,EACF,OAEF,OAAOzN,KAAK4N,MAAMH,GAClB,MAAOI,GACP,QDHqBC,GACjBC,EAAc,CAACC,KAMrB,OAAOC,YACLjB,GACAQ,EACAU,IAAepN,WAAf,EAAmBiN,IDVTI,GAEd7B,GAAM8B,UACJC,mBAAS,YEIc,SAAA9J,GACvB,IACE,IAAMkJ,EAAkBzN,KAAKC,UAAUsE,GACvCmJ,aAAaY,QAjBI,WAiBkBb,GACnC,MAAOI,KFPPU,CAAU,CACR5F,SAAU2D,GAAM1D,WAAWD,SAC3BlE,UAAW6H,GAAM1D,WAAWnE,UAC5BlD,aAAc+K,GAAM1D,WAAWrH,iBAGnC,KAGF0K,iBAAOtJ,EAAA7D,EAAA8D,cAAC4L,EAAD,CAAMlC,MAAOA,KAAWmC,SAASC,eAAe","file":"static/js/main.1ce87b0c.chunk.js","sourcesContent":["const GITHUB_API_URI = \"https://api.github.com/graphql\";\r\n\r\nexport const get = async (query, token) => {\r\n  const response = await fetch(GITHUB_API_URI, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`\r\n    },\r\n    body: JSON.stringify({ query })\r\n  });\r\n\r\n  if (response.ok) {\r\n    const result = await response.json();\r\n\r\n    if (result.errors) {\r\n      throw new Error(result.errors[0].message);\r\n    }\r\n\r\n    if (result.data) {\r\n      return result.data;\r\n    }\r\n  }\r\n\r\n  throw new Error(\"Error communicating with GitHub\");\r\n};\r\n\r\nexport const queries = {\r\n  watchedRepos: (cursor = \"\") => {\r\n    const afterParam = cursor ? `after: ${cursor}` : \"\";\r\n    return `\r\n      query {\r\n        viewer {\r\n          watching(\r\n            first: 100\r\n            ${afterParam}\r\n          ) {\r\n            edges {\r\n              cursor\r\n              node {\r\n                id\r\n                name\r\n                url\r\n                owner {\r\n                  login\r\n                  avatarUrl(size: 96)\r\n                }\r\n                createdAt\r\n              }\r\n            }\r\n            totalCount\r\n            pageInfo {\r\n              hasNextPage\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `;\r\n  },\r\n  pullRequestsForRepos: repoIds => `\r\n    query {\r\n      nodes (ids: ${JSON.stringify(repoIds)}) {\r\n        id\r\n        ... on Repository {\r\n          pullRequests(\r\n            last: 50\r\n            states: [OPEN]\r\n            orderBy: { field: CREATED_AT, direction: DESC }\r\n          ) {\r\n            edges {\r\n              node {\r\n                id\r\n                number\r\n                title\r\n                url\r\n                createdAt\r\n                updatedAt\r\n                repository {\r\n                  nameWithOwner\r\n                  url\r\n                }\r\n                author {\r\n                  avatarUrl(size: 96)\r\n                  login\r\n                  url\r\n                }\r\n                reviewRequests(last: 100) {\r\n                  edges {\r\n                    node {\r\n                      requestedReviewer {\r\n                        ... on User {\r\n                          login\r\n                          avatarUrl(size: 96)\r\n                        }\r\n                        ... on Team {\r\n                          name\r\n                          avatarUrl(size: 96)\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                reviews(last: 100) {\r\n                  edges {\r\n                    node {\r\n                      createdAt\r\n                      state\r\n                      author {\r\n                        login\r\n                        avatarUrl(size: 96)\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `\r\n};\r\n","import { queries, get } from \"../githubApi\";\r\n\r\nexport const REQUEST_PULL_REQUESTS = \"REQUEST_PULL_REQUESTS\";\r\nexport const REQUEST_PULL_REQUESTS_LOADING = \"REQUEST_PULL_REQUESTS_LOADING\";\r\nexport const REQUEST_PULL_REQUESTS_SUCCESS = \"REQUEST_PULL_REQUESTS_SUCCESS\";\r\nexport const REQUEST_PULL_REQUESTS_FAILURE = \"REQUEST_PULL_REQUESTS_FAILURE\";\r\nexport const SET_FILTERS = \"SET_FILTERS\";\r\n\r\nexport const requestPullRequestsLoading = () => ({\r\n  type: REQUEST_PULL_REQUESTS_LOADING\r\n});\r\n\r\nexport const requestPullRequestsSuccess = (data, watchedRepos) => ({\r\n  type: REQUEST_PULL_REQUESTS_SUCCESS,\r\n  data,\r\n  watchedRepos\r\n});\r\n\r\nexport const requestPullRequestsFailure = error => ({\r\n  type: REQUEST_PULL_REQUESTS_FAILURE,\r\n  error\r\n});\r\n\r\nexport const requestPullRequests = (repoIds, token) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const watchedRepos = getState().watchedRepos.repos;\r\n  try {\r\n    dispatch(requestPullRequestsLoading());\r\n    const query = queries.pullRequestsForRepos(repoIds);\r\n    const results = await get(query, token);\r\n    dispatch(requestPullRequestsSuccess(results, watchedRepos));\r\n  } catch (err) {\r\n    dispatch(requestPullRequestsFailure(err));\r\n  }\r\n};\r\n\r\nexport const setFilters = filters => ({\r\n  type: SET_FILTERS,\r\n  filters\r\n});\r\n","import React from \"react\";\r\nimport { formatDistance } from \"date-fns\";\r\n\r\nconst PR_STATE_CLASSES = {\r\n  \"review requested\": \"bg-blue text-white\",\r\n  \"changes requested\": \"Label--orange\",\r\n  approved: \"bg-green text-white\",\r\n  commented: \"Label--gray\",\r\n  pending: \"Label--gray\",\r\n  dismissed: \"bg-red text-white\"\r\n};\r\n\r\nconst PullRequest = ({\r\n  number,\r\n  title,\r\n  url,\r\n  createdAt,\r\n  author,\r\n  repository,\r\n  reviewState\r\n}) => {\r\n  const now = new Date();\r\n  const relativeTime = field => formatDistance(field, now, { addSuffix: true });\r\n\r\n  return (\r\n    <div className=\"Box-row Box-row--hover-gray d-flex\">\r\n      {author.avatarUrl && (\r\n        <div className=\"pr-3\">\r\n          <img\r\n            className=\"avatar\"\r\n            src={author.avatarUrl}\r\n            width=\"48\"\r\n            height=\"48\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n      )}\r\n      <div className=\"flex-auto\">\r\n        <a href={repository.url} className=\"muted-link h4 pr-1\">\r\n          {repository.nameWithOwner}\r\n        </a>\r\n        <a href={url} className=\"link-gray-dark no-underline h4\">\r\n          {title}\r\n        </a>\r\n        <div className=\"text-gray\">\r\n          #{number} opened{\" \"}\r\n          <span title={createdAt}>{relativeTime(createdAt)}</span> by{\" \"}\r\n          <a href={author.url} className=\"muted-link\">\r\n            {author.login}\r\n          </a>\r\n          {reviewState ? (\r\n            <span className={`Label ml-2 ${PR_STATE_CLASSES[reviewState]}`}>\r\n              {reviewState}\r\n            </span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PullRequest;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Flash = ({ type, children }) => (\r\n  <div className={`flash flash-full${type ? `flash-${type}` : null}`}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nFlash.propTypes = {\r\n  type: PropTypes.string,\r\n  message: PropTypes.string\r\n};\r\n\r\nexport default Flash;\r\n","import { isSameMonth } from \"date-fns\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Stats = ({ pullRequests }) => {\r\n  const now = new Date();\r\n  const total = pullRequests.length || 0;\r\n  const openedThisMonth =\r\n    pullRequests.filter(pr => isSameMonth(new Date(pr.createdAt), now))\r\n      .length || 0;\r\n  const updatedThisMonth =\r\n    pullRequests.filter(pr => isSameMonth(new Date(pr.updatedAt), now))\r\n      .length || 0;\r\n\r\n  return (\r\n    <div className=\"d-flex mb-4\">\r\n      <div className=\"col-4 p-2 border text-center\">\r\n        <h3 className=\"f4 text-gray-light\">Total open</h3>\r\n        <span className=\"f1\">{total}</span>\r\n      </div>\r\n      <div className=\"col-4 p-2 border text-center\">\r\n        <h3 className=\"f4 text-gray-light\">Opened this month</h3>\r\n        <span className=\"f1\">{openedThisMonth}</span>\r\n      </div>\r\n      <div className=\"col-4 p-2 border text-center\">\r\n        <h3 className=\"f4 text-gray-light\">Updated this month</h3>\r\n        <span className=\"f1\">{updatedThisMonth}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nStats.propTypes = {\r\n  pullRequests: PropTypes.arrayOf(PropTypes.shape())\r\n};\r\n\r\nexport default Stats;\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions/dashboard\";\r\n\r\nconst DEFAULT_FILTERS = {\r\n  repo: \"\",\r\n  author: \"\",\r\n  orderBy: \"updatedAt\"\r\n};\r\n\r\nconst Filters = props => {\r\n  const handleSelectChange = e => {\r\n    props.setFilters({\r\n      ...props.filters,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const renderAuthorsSelect = () => {\r\n    const authors = _.chain(props.pullRequests)\r\n      .map(pr => pr.author)\r\n      .uniqBy(\"login\")\r\n      .value();\r\n\r\n    return (\r\n      <select\r\n        className=\"form-select select-sm mr-2\"\r\n        name=\"author\"\r\n        value={props.filters.author}\r\n        onChange={handleSelectChange}\r\n        style={{ width: \"130px\" }}\r\n      >\r\n        <option value=\"\">all authors</option>\r\n        {authors.map(({ login }) => (\r\n          <option key={login} value={login}>\r\n            {login}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    );\r\n  };\r\n\r\n  const renderReposSelect = () => {\r\n    const repos = _.chain(props.pullRequests)\r\n      .map(pr => pr.repoName)\r\n      .uniqBy()\r\n      .value();\r\n\r\n    return (\r\n      <select\r\n        className=\"form-select select-sm mr-2\"\r\n        name=\"repo\"\r\n        value={props.filters.repo}\r\n        onChange={handleSelectChange}\r\n        style={{ width: \"130px\" }}\r\n      >\r\n        <option value=\"\">all repositories</option>\r\n        {repos.map(repo => (\r\n          <option key={repo} value={repo}>\r\n            {repo}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    );\r\n  };\r\n\r\n  const renderReviewStateSelect = () => {\r\n    const reviewStates = _.chain(props.pullRequests)\r\n      .map(pr => pr.reviewState)\r\n      .uniqBy()\r\n      .compact()\r\n      .value();\r\n\r\n    return (\r\n      <select\r\n        className=\"form-select select-sm mr-2\"\r\n        name=\"reviewState\"\r\n        value={props.filters.reviewState}\r\n        onChange={handleSelectChange}\r\n        style={{ width: \"130px\" }}\r\n      >\r\n        <option value=\"\">all review states</option>\r\n        {reviewStates.map(state => (\r\n          <option key={state} value={state}>\r\n            {state}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    );\r\n  };\r\n\r\n  const renderOrderBySelect = () => (\r\n    <select\r\n      className=\"form-select select-sm mr-2\"\r\n      name=\"orderBy\"\r\n      value={props.filters.orderBy}\r\n      onChange={handleSelectChange}\r\n      style={{ width: \"130px\" }}\r\n    >\r\n      <option value={\"updatedAt\"}>recently updated</option>\r\n      <option value={\"createdAt\"}>newest</option>\r\n    </select>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <span className=\"text-gray mr-2\">Show ({props.filteredCount}):</span>\r\n      {renderAuthorsSelect()}\r\n      {renderReposSelect()}\r\n      {renderReviewStateSelect()}\r\n      <span className=\"text-gray mr-2\">Order by:</span>\r\n      {renderOrderBySelect()}\r\n      <button\r\n        className=\"btn btn-sm\"\r\n        onClick={() => props.setFilters(DEFAULT_FILTERS)}\r\n      >\r\n        Reset\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nFilters.propTypes = {\r\n  pullRequests: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filters: state.dashboard.filters\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setFilters: filters => {\r\n    dispatch(actions.setFilters(filters));\r\n  },\r\n  dispatch\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Filters);\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Octicon, {\r\n  Settings as SettingsIcon,\r\n  Sync as SyncIcon\r\n} from \"@githubprimer/octicons-react\";\r\nimport * as actions from \"../../actions/dashboard\";\r\nimport PullRequest from \"./pull-request\";\r\nimport Flash from \"../common/flash\";\r\nimport Stats from \"./stats\";\r\nimport Filters from \"./filters\";\r\n\r\nclass Dashboard extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.updateInterval = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.selectedRepos.length > 0) {\r\n      this.props.requestPullRequests(\r\n        this.props.selectedRepos,\r\n        this.props.token\r\n      );\r\n\r\n      if (this.props.autoRefreshEnabled) {\r\n        this.updateInterval = setInterval(() => {\r\n          this.props.requestPullRequests(\r\n            this.props.selectedRepos,\r\n            this.props.token\r\n          );\r\n        }, this.props.autoRefreshInterval * 60 * 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.clearInterval(this.updateInterval);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      selectedRepos,\r\n      pullRequests,\r\n      filteredPullRequests,\r\n      loading,\r\n      githubError,\r\n      requestPullRequests,\r\n      token,\r\n      autoRefreshEnabled\r\n    } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"App-menu p-3 bg-gray-light border-bottom\">\r\n          <div className=\"container-lg d-flex flex-items-center\">\r\n            <div className=\"flex-auto\">\r\n              <h1 className=\"h3\">Dashboard</h1>\r\n            </div>\r\n            <div>\r\n              <Link to=\"/settings\" className=\"btn mr-2\">\r\n                <Octicon icon={SettingsIcon} /> Settings\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <main className=\"App-main\">\r\n          <div className=\"container-lg py-4\">\r\n            {!selectedRepos.length ? (\r\n              <Flash>\r\n                You have not selected any{\" \"}\r\n                <Link to=\"/settings/repositories\">repositories</Link> yet.\r\n              </Flash>\r\n            ) : (\r\n              <>\r\n                <Stats pullRequests={pullRequests} />\r\n                <div className=\"Box\">\r\n                  <div className=\"Box-header d-flex flex-items-center\">\r\n                    <div className=\"flex-auto d-flex flex-items-center\">\r\n                      <Filters\r\n                        pullRequests={pullRequests}\r\n                        filteredCount={filteredPullRequests.length}\r\n                      />\r\n                    </div>\r\n                    <div className=\"d-flex flex-items-center\">\r\n                      {autoRefreshEnabled && (\r\n                        <span className=\"text-gray mr-2 f6\">\r\n                          Auto refresh{\" \"}\r\n                          <Link to={\"/settings/dashboard\"}>enabled</Link>.\r\n                        </span>\r\n                      )}\r\n                      <button\r\n                        className=\"btn btn-sm btn-primary\"\r\n                        onClick={() =>\r\n                          requestPullRequests(selectedRepos, token)\r\n                        }\r\n                      >\r\n                        <Octicon icon={SyncIcon} /> Sync\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {loading ? (\r\n                    <div className=\"blankslate blankslate-clean-background\">\r\n                      <p>Loading...</p>\r\n                    </div>\r\n                  ) : null}\r\n\r\n                  {githubError ? (\r\n                    <div className=\"blankslate blankslate-clean-background\">\r\n                      <p>\r\n                        Error fetching data from GitHub. Ensure your{\" \"}\r\n                        <Link to=\"/settings/account\">token</Link> is set\r\n                        correctly and try again.\r\n                      </p>\r\n                    </div>\r\n                  ) : null}\r\n\r\n                  {!loading && !githubError && !filteredPullRequests.length ? (\r\n                    <div className=\"blankslate blankslate-clean-background\">\r\n                      <p>No pull requests were found.</p>\r\n                    </div>\r\n                  ) : null}\r\n\r\n                  {!loading && !githubError && filteredPullRequests.length > 0\r\n                    ? filteredPullRequests.map(pr => (\r\n                        <PullRequest key={pr.id} {...pr} />\r\n                      ))\r\n                    : null}\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </main>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  selectedRepos: PropTypes.arrayOf(PropTypes.string),\r\n  githubError: PropTypes.shape(),\r\n  loading: PropTypes.bool,\r\n  pullRequests: PropTypes.arrayOf(PropTypes.shape()),\r\n  token: PropTypes.string,\r\n  requestPullRequests: PropTypes.func\r\n};\r\n\r\nDashboard.defaultProps = {\r\n  selectedRepos: [],\r\n  token: null,\r\n  pullRequests: [],\r\n  loading: false,\r\n  githubError: null\r\n};\r\n\r\nconst applyFilters = (pullRequests, filters) => {\r\n  let filtered = pullRequests;\r\n\r\n  if (filters.repo) {\r\n    filtered = _.filter(filtered, pr => pr.repoName === filters.repo);\r\n  }\r\n\r\n  if (filters.author) {\r\n    filtered = _.filter(filtered, pr => pr.author.login === filters.author);\r\n  }\r\n\r\n  if (filters.reviewState) {\r\n    filtered = _.filter(filtered, pr => pr.reviewState === filters.reviewState);\r\n  }\r\n\r\n  filtered = _.orderBy(filtered, filters.orderBy, \"desc\");\r\n\r\n  return filtered;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedRepos: state.settings.selectedRepos,\r\n  token: state.settings.token,\r\n  autoRefreshEnabled: state.settings.autoRefreshEnabled,\r\n  autoRefreshInterval: state.settings.autoRefreshInterval,\r\n  githubError: state.dashboard.githubError,\r\n  loading: state.dashboard.loading,\r\n  pullRequests: state.dashboard.pullRequests,\r\n  filteredPullRequests: applyFilters(\r\n    state.dashboard.pullRequests,\r\n    state.dashboard.filters\r\n  )\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  requestPullRequests: (repoIds, token) => {\r\n    dispatch(actions.requestPullRequests(repoIds, token));\r\n  },\r\n  dispatch\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Dashboard);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport * as settingsActions from \"../../actions/settings\";\r\n\r\nclass Account extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.input = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    const { token, setToken } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"Subhead\">\r\n          <h2 className=\"Subhead-heading\">Account</h2>\r\n        </div>\r\n        <p>\r\n          You need to add a Personal Access Token in order to access GitHub\r\n          data.\r\n        </p>\r\n        <ol className=\"pl-3\">\r\n          <li>\r\n            Go to{\" \"}\r\n            <a\r\n              href=\"https://github.com/settings/tokens\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Personal Access Tokens\r\n            </a>{\" \"}\r\n            and click <b>Generate new token</b>.\r\n          </li>\r\n          <li>\r\n            Enter a description, select the <code>repo</code> scope, then click{\" \"}\r\n            <b>Generate token</b>.\r\n          </li>\r\n          <li>Copy the given token and add it below.</li>\r\n        </ol>\r\n        <form className=\"my-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Token\"\r\n            ref={this.input}\r\n            onChange={() => setToken(this.input.current.value)}\r\n            value={token}\r\n          />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nAccount.propTypes = {\r\n  token: PropTypes.string,\r\n  setToken: PropTypes.func.isRequired\r\n};\r\n\r\nAccount.defaultProps = {\r\n  token: null\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  token: state.settings.token\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setToken: value => dispatch(settingsActions.setToken(value)),\r\n  dispatch\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Account);\r\n","export const SET_TOKEN = \"SET_TOKEN\";\r\nexport const TOGGLE_REPO_SELECTION = \"TOGGLE_REPO_SELECTION\";\r\nexport const SELECT_ALL_REPOS = \"SELECT_ALL_REPOS\";\r\nexport const RESET_SELECTED_REPOS = \"RESET_SELECTED_REPOS\";\r\nexport const TOGGLE_AUTO_REFRESH = \"TOGGLE_AUTO_REFRESH\";\r\nexport const SET_AUTO_REFRESH_INTERVAL = \"SET_AUTO_REFRESH_INTERVAL\";\r\n\r\nexport const setToken = value => ({\r\n  type: SET_TOKEN,\r\n  value\r\n});\r\n\r\nexport const toggleRepoSelection = id => ({\r\n  type: TOGGLE_REPO_SELECTION,\r\n  id\r\n});\r\n\r\nexport const selectAllRepos = repoIds => ({\r\n  type: SELECT_ALL_REPOS,\r\n  repoIds\r\n});\r\n\r\nexport const resetSelectedRepos = () => ({\r\n  type: RESET_SELECTED_REPOS\r\n});\r\n\r\nexport const toggleAutoRefresh = () => ({\r\n  type: TOGGLE_AUTO_REFRESH\r\n});\r\n\r\nexport const setAutoRefreshInterval = interval => ({\r\n  type: SET_AUTO_REFRESH_INTERVAL,\r\n  interval\r\n});\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Octicon, {\r\n  Sync as SyncIcon,\r\n  LinkExternal as LinkExternalIcon\r\n} from \"@githubprimer/octicons-react\";\r\nimport * as settingsActions from \"../../actions/settings\";\r\nimport * as watchedReposActions from \"../../actions/watchedRepos\";\r\n\r\nclass Repositories extends React.PureComponent {\r\n  componentDidMount() {\r\n    this.props.requestWatchedRepos(this.props.token);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      token,\r\n      loading,\r\n      githubError,\r\n      watchedRepos,\r\n      selectedRepos,\r\n      selectAllRepos,\r\n      resetSelectedRepos,\r\n      toggleRepoSelection,\r\n      requestWatchedRepos\r\n    } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"Subhead\">\r\n          <h2 className=\"Subhead-heading\">Repositories</h2>\r\n        </div>\r\n        <p className=\"mb-4\">\r\n          Select the repositories you wish to monitor on the dashboard.{\" \"}\r\n          <strong>\r\n            Only repositories you are{\" \"}\r\n            <a href=\"https://github.com/watching\">watching</a> are listed here.\r\n          </strong>\r\n        </p>\r\n        <div className=\"Box\">\r\n          <div className=\"Box-header py-2 d-flex flex-items-center\">\r\n            <h3 className=\"Box-title\">\r\n              Selected repositories{\" \"}\r\n              <span className=\"Counter Counter--gray-dark\">\r\n                {selectedRepos.length}\r\n              </span>\r\n            </h3>\r\n            <div className=\"flex-auto text-right\">\r\n              <div className=\"BtnGroup\">\r\n                <button\r\n                  className=\"BtnGroup-item btn btn-sm\"\r\n                  onClick={() =>\r\n                    selectAllRepos(watchedRepos.map(repo => repo.id))\r\n                  }\r\n                >\r\n                  Select all\r\n                </button>\r\n                <button\r\n                  className=\"BtnGroup-item btn btn-sm\"\r\n                  onClick={() => resetSelectedRepos()}\r\n                >\r\n                  Reset\r\n                </button>\r\n              </div>\r\n              <button\r\n                className=\"btn btn-sm btn-primary\"\r\n                onClick={() => requestWatchedRepos(token)}\r\n              >\r\n                <Octicon icon={SyncIcon} /> Sync\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {loading ? (\r\n            <div className=\"blankslate blankslate-clean-background\">\r\n              <p>Loading...</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {githubError ? (\r\n            <div className=\"blankslate blankslate-clean-background\">\r\n              <p>\r\n                Error fetching data from GitHub. Ensure your{\" \"}\r\n                <Link to=\"/settings/account\">token</Link> is set correctly and\r\n                try again.\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {!loading && !githubError && !watchedRepos.length ? (\r\n            <div className=\"blankslate blankslate-clean-background\">\r\n              <p>You are not watching any repositories currently.</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {!loading && !githubError && watchedRepos.length > 0\r\n            ? watchedRepos.map(({ id, name, url }) => {\r\n                const htmlId = `repo-${id}`;\r\n                const checked = selectedRepos.includes(id);\r\n                const onChange = () => toggleRepoSelection(id);\r\n                return (\r\n                  <div\r\n                    className=\"Box-row Box-row--hover-gray d-flex flex-items-center py-2 px-3\"\r\n                    key={id}\r\n                  >\r\n                    <div className=\"form-checkbox flex-auto my-0\">\r\n                      <label>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          id={htmlId}\r\n                          onChange={onChange}\r\n                          checked={checked}\r\n                        />{\" \"}\r\n                        {name}\r\n                      </label>\r\n                    </div>\r\n                    <a className=\"btn btn-sm btn-outline\" href={url}>\r\n                      <Octicon icon={LinkExternalIcon} size={14} /> Open on\r\n                      GitHub\r\n                    </a>\r\n                  </div>\r\n                );\r\n              })\r\n            : null}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nRepositories.propTypes = {\r\n  watchedRepos: PropTypes.arrayOf(PropTypes.shape()),\r\n  loading: PropTypes.bool,\r\n  githubError: PropTypes.shape(),\r\n  selectedRepos: PropTypes.arrayOf(PropTypes.string),\r\n  token: PropTypes.string\r\n};\r\n\r\nRepositories.defaultProps = {\r\n  watchedRepos: [],\r\n  loading: false,\r\n  githubError: null,\r\n  selectedRepos: [],\r\n  token: null\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  watchedRepos: state.watchedRepos.repos,\r\n  loading: state.watchedRepos.loading,\r\n  githubError: state.watchedRepos.githubError,\r\n  selectedRepos: state.settings.selectedRepos,\r\n  token: state.settings.token\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  requestWatchedRepos: token =>\r\n    dispatch(watchedReposActions.requestWatchedRepos(token)),\r\n  toggleRepoSelection: id => dispatch(settingsActions.toggleRepoSelection(id)),\r\n  selectAllRepos: repoIds => dispatch(settingsActions.selectAllRepos(repoIds)),\r\n  resetSelectedRepos: () => dispatch(settingsActions.resetSelectedRepos()),\r\n  dispatch\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Repositories);\r\n","import { queries, get } from \"../githubApi\";\r\n\r\nexport const REQUEST_WATCHED_REPOS = \"REQUEST_WATCHED_REPOS\";\r\nexport const REQUEST_WATCHED_REPOS_LOADING = \"REQUEST_WATCHED_REPOS_LOADING\";\r\nexport const REQUEST_WATCHED_REPOS_SUCCESS = \"REQUEST_WATCHED_REPOS_SUCCESS\";\r\nexport const REQUEST_WATCHED_REPOS_FAILURE = \"REQUEST_WATCHED_REPOS_FAILURE\";\r\n\r\nexport const requestWatchedReposLoading = () => ({\r\n  type: REQUEST_WATCHED_REPOS_LOADING\r\n});\r\n\r\nexport const requestWatchedReposSuccess = data => ({\r\n  type: REQUEST_WATCHED_REPOS_SUCCESS,\r\n  data\r\n});\r\n\r\nexport const requestWatchedReposFailure = error => ({\r\n  type: REQUEST_WATCHED_REPOS_FAILURE,\r\n  error\r\n});\r\n\r\nexport const requestWatchedRepos = token => async dispatch => {\r\n  try {\r\n    dispatch(requestWatchedReposLoading());\r\n    let query = queries.watchedRepos();\r\n    const initialResults = await get(query, token);\r\n    let reposArray = initialResults.viewer.watching.edges;\r\n    if (initialResults.viewer.watching.pageInfo.hasNextPage) {\r\n      let paginate = true;\r\n      while (paginate) {\r\n        query = queries.watchedRepos(reposArray[reposArray.length - 1].cursor);\r\n        const paginatedResults = await get(query, token);\r\n        reposArray = [...reposArray, ...paginatedResults.viewer.watching.edges];\r\n        paginate = paginatedResults.viewer.watching.pageInfo.hasNextPage;\r\n      }\r\n    }\r\n    reposArray = reposArray.map(repo => ({\r\n      id: repo.node.id,\r\n      name: repo.node.name,\r\n      url: repo.node.url,\r\n      owner: repo.node.owner,\r\n      createdAt: repo.node.createdAt\r\n    }));\r\n    dispatch(requestWatchedReposSuccess(reposArray));\r\n  } catch (err) {\r\n    dispatch(requestWatchedReposFailure(err));\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions/settings\";\r\n\r\nconst Dashboard = props => (\r\n  <>\r\n    <div className=\"Subhead\">\r\n      <h2 className=\"Subhead-heading\">Dashboard</h2>\r\n    </div>\r\n    <form>\r\n      <div className=\"form-checkbox\">\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={props.autoRefreshEnabled}\r\n            onChange={props.toggleAutoRefresh}\r\n          />{\" \"}\r\n          Auto refresh dashboard every\r\n          <select\r\n            className=\"form-select select-sm ml-1\"\r\n            value={props.autoRefreshInterval}\r\n            onChange={e => props.setAutoRefreshInterval(e.target.value)}\r\n          >\r\n            <option value=\"1\">1 minute</option>\r\n            <option value=\"5\">5 minutes</option>\r\n            <option value=\"10\">10 minutes</option>\r\n            <option value=\"30\">30 minutes</option>\r\n          </select>\r\n        </label>\r\n        <p className=\"note\">\r\n          Refreshes the dashboard with new pull requests periodically.\r\n        </p>\r\n      </div>\r\n    </form>\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  autoRefreshEnabled: state.settings.autoRefreshEnabled,\r\n  autoRefreshInterval: state.settings.autoRefreshInterval\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleAutoRefresh: () => dispatch(actions.toggleAutoRefresh()),\r\n  setAutoRefreshInterval: interval =>\r\n    dispatch(actions.setAutoRefreshInterval(interval)),\r\n  dispatch\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Dashboard);\r\n","import React from \"react\";\r\nimport { Link, NavLink, Redirect, Switch, Route } from \"react-router-dom\";\r\nimport Octicon, {\r\n  CloudUpload as CloudUploadIcon,\r\n  Person as PersonIcon,\r\n  Repo as RepoIcon,\r\n  Dashboard as DashboardIcon\r\n} from \"@githubprimer/octicons-react\";\r\nimport Account from \"./account\";\r\nimport Repositories from \"./repositories\";\r\nimport Dashboard from \"./dashboard\";\r\n\r\nconst Settings = ({ match }) => (\r\n  <>\r\n    <div className=\"App-menu p-3 bg-gray-light border-bottom\">\r\n      <div className=\"container-lg d-flex flex-items-center\">\r\n        <div className=\"flex-auto\">\r\n          <h1 className=\"h3\">Settings</h1>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/\" className=\"btn btn-primary\">\r\n            <Octicon icon={CloudUploadIcon} /> Save\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <main className=\"App-main\">\r\n      <div className=\"container-lg py-4 d-flex\">\r\n        <div className=\"col-3 pr-4\">\r\n          <nav className=\"menu\">\r\n            <NavLink\r\n              to={`${match.url}/dashboard`}\r\n              className=\"menu-item\"\r\n              activeClassName=\"selected\"\r\n            >\r\n              <Octicon icon={DashboardIcon} /> Dashboard\r\n            </NavLink>\r\n            <NavLink\r\n              to={`${match.url}/account`}\r\n              className=\"menu-item\"\r\n              activeClassName=\"selected\"\r\n            >\r\n              <Octicon icon={PersonIcon} /> Account\r\n            </NavLink>\r\n            <NavLink\r\n              to={`${match.url}/repositories`}\r\n              className=\"menu-item\"\r\n              activeClassName=\"selected\"\r\n            >\r\n              <Octicon icon={RepoIcon} /> Repositories\r\n            </NavLink>\r\n          </nav>\r\n        </div>\r\n        <div className=\"col-9\">\r\n          <Switch>\r\n            <Route path={`${match.url}/dashboard`} component={Dashboard} />\r\n            <Route path={`${match.url}/account`} component={Account} />\r\n            <Route\r\n              path={`${match.url}/repositories`}\r\n              component={Repositories}\r\n            />\r\n            <Route\r\n              exact\r\n              path={`${match.url}`}\r\n              render={() => <Redirect to={`${match.url}/dashboard`} />}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </>\r\n);\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => (\r\n  <main className=\"App-main\">\r\n    <div className=\"container-lg py-4\">\r\n      <div className=\"blankslate\">\r\n        <h3>Not found</h3>\r\n        <p>The page you are looking for could not be found.</p>\r\n      </div>\r\n    </div>\r\n  </main>\r\n);\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { Route, Switch, Link } from \"react-router-dom\";\r\nimport Dashboard from \"./dashboard\";\r\nimport Settings from \"./settings\";\r\nimport NotFound from \"./common/not-found\";\r\n\r\nimport \"../../node_modules/primer/build/build.css\";\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header p-3 bg-gray-dark text-white\">\r\n      <div className=\"container-lg d-flex flex-items-center\">\r\n        <h1 className=\"flex-auto h2\">\r\n          <Link to=\"/\" className=\"text-white\">\r\n            GitObserve\r\n          </Link>\r\n        </h1>\r\n      </div>\r\n    </header>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Dashboard} />\r\n      <Route path=\"/settings\" component={Settings} />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport App from \"./app\";\r\n\r\nconst Root = ({ store }) => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Route path=\"/\" component={App} />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nRoot.propTypes = {\r\n  store: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Root;\r\n","import _ from \"lodash\";\r\nimport * as actions from \"../actions/dashboard\";\r\n\r\nconst initialState = {\r\n  pullRequests: [],\r\n  filters: {\r\n    repo: \"\",\r\n    author: \"\",\r\n    reviewState: \"\",\r\n    orderBy: \"updatedAt\"\r\n  },\r\n  loading: false,\r\n  githubError: null\r\n};\r\n\r\nconst formatReviewState = state => {\r\n  if (typeof state !== \"string\") return;\r\n  return state.replace(/_/g, \" \").toLowerCase();\r\n};\r\n\r\nconst getReviewState = (reviews, reviewRequests) => {\r\n  // Expected values: \"PENDING\", \"COMMENTED\", \"APPROVED\",\r\n  // \"CHANGES_REQUESTED\", \"DISMISSED\", or \"REVIEW_REQUESTED\" (custom).\r\n  // We take the last review's state, replace any underscores, and make it\r\n  // lowercase so it can be dispayed nicely to the user.\r\n  let state = null;\r\n  if (!reviews.length) {\r\n    if (reviewRequests.length > 0) {\r\n      state = \"REVIEW_REQUESTED\";\r\n    }\r\n    return formatReviewState(state);\r\n  }\r\n  state = reviews[reviews.length - 1].state;\r\n  return formatReviewState(state);\r\n};\r\n\r\nconst formatPrs = prs => {\r\n  return _.chain(prs.nodes)\r\n    .filter(node => node)\r\n    .map(node => _.map(node.pullRequests.edges, \"node\"))\r\n    .flatten()\r\n    .map(pr => ({\r\n      ...pr,\r\n      repoName: pr.repository.nameWithOwner,\r\n      reviewState: getReviewState(\r\n        _.map(pr.reviews.edges, \"node\"),\r\n        _.map(pr.reviewRequests.edges, \"node\")\r\n      )\r\n    }))\r\n    .orderBy(\"updatedAt\")\r\n    .reverse()\r\n    .value();\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.REQUEST_PULL_REQUESTS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        githubError: null\r\n      };\r\n    case actions.REQUEST_PULL_REQUESTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pullRequests: formatPrs(action.data),\r\n        loading: false,\r\n        githubError: null\r\n      };\r\n    case actions.REQUEST_PULL_REQUESTS_FAILURE:\r\n      return {\r\n        ...state,\r\n        pullRequests: [],\r\n        githubError: action.error,\r\n        loading: false\r\n      };\r\n    case actions.SET_FILTERS:\r\n      return {\r\n        ...state,\r\n        filters: action.filters\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as actions from \"../actions/watchedRepos\";\r\n\r\nconst initialState = {\r\n  repos: [],\r\n  loading: false,\r\n  githubError: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.REQUEST_WATCHED_REPOS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        githubError: null\r\n      };\r\n    case actions.REQUEST_WATCHED_REPOS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        repos: action.data,\r\n        githubError: null,\r\n        loading: false\r\n      };\r\n    case actions.REQUEST_WATCHED_REPOS_FAILURE:\r\n      return {\r\n        ...state,\r\n        repos: [],\r\n        githubError: action.error,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as actions from \"../actions/settings\";\r\n\r\nconst initialState = {\r\n  token: \"\",\r\n  selectedRepos: [],\r\n  autoRefreshEnabled: false,\r\n  autoRefreshInterval: \"5\"\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.SET_TOKEN:\r\n      return {\r\n        ...state,\r\n        token: action.value\r\n      };\r\n    case actions.TOGGLE_REPO_SELECTION:\r\n      return state.selectedRepos.includes(action.id)\r\n        ? {\r\n            ...state,\r\n            selectedRepos: state.selectedRepos.filter(\r\n              repoId => repoId !== action.id\r\n            )\r\n          }\r\n        : {\r\n            ...state,\r\n            selectedRepos: [...state.selectedRepos, action.id]\r\n          };\r\n    case actions.SELECT_ALL_REPOS:\r\n      return {\r\n        ...state,\r\n        selectedRepos: [...action.repoIds]\r\n      };\r\n    case actions.RESET_SELECTED_REPOS:\r\n      return {\r\n        ...state,\r\n        selectedRepos: []\r\n      };\r\n    case actions.TOGGLE_AUTO_REFRESH:\r\n      return {\r\n        ...state,\r\n        autoRefreshEnabled: !state.autoRefreshEnabled\r\n      };\r\n    case actions.SET_AUTO_REFRESH_INTERVAL:\r\n      return {\r\n        ...state,\r\n        autoRefreshInterval: action.interval\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport dashboard from \"./dashboard\";\r\nimport watchedRepos from \"./watchedRepos\";\r\nimport settings from \"./settings\";\r\n\r\nconst rootReducer = combineReducers({\r\n  dashboard,\r\n  watchedRepos,\r\n  settings\r\n});\r\n\r\nexport default rootReducer;\r\n","import { throttle } from \"lodash\";\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport Root from \"./components/root\";\r\nimport configureStore from \"./configureStore\";\r\nimport { saveState } from \"./localStorage\";\r\n\r\nconst store = configureStore();\r\n\r\nstore.subscribe(\r\n  throttle(() => {\r\n    saveState({\r\n      settings: store.getState().settings,\r\n      dashboard: store.getState().dashboard,\r\n      watchedRepos: store.getState().watchedRepos\r\n    });\r\n  }),\r\n  1000\r\n);\r\n\r\nrender(<Root store={store} />, document.getElementById(\"root\"));\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nimport { loadState } from \"./localStorage\";\r\n\r\nconst configureStore = () => {\r\n  const persistedState = loadState();\r\n  const middlewares = [thunk];\r\n\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    middlewares.push(logger);\r\n  }\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    applyMiddleware(...middlewares)\r\n  );\r\n};\r\n\r\nexport default configureStore;\r\n","const LS_STATE_KEY = \"go_state\";\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(LS_STATE_KEY);\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = state => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(LS_STATE_KEY, serializedState);\r\n  } catch (err) {\r\n    // Ignore write errors.\r\n  }\r\n};\r\n"],"sourceRoot":""}